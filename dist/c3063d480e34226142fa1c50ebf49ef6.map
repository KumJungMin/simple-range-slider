{"version":3,"sources":["src/index.ts"],"names":[],"mappings":"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","file":"c3063d480e34226142fa1c50ebf49ef6.map","sourcesContent":["class RangeSlider {\n  constants: {\n    MAX_VALUE: number;\n    MIN_VALUE: number;\n    RANGE_STEP: number;\n    HANDLE_SIZE: number;\n    readonly RANGE: number;\n  };\n\n  elements: {\n    progress: HTMLElement;\n    minRange: HTMLInputElement;\n    maxRange: HTMLInputElement;\n    handles: NodeListOf<HTMLElement>;\n  };\n\n  constructor() {\n    this.constants = {\n      MAX_VALUE: this.getGlobalCssValue(\"--max-value\"),\n      MIN_VALUE: this.getGlobalCssValue(\"--min-value\"),\n      RANGE_STEP: this.getGlobalCssValue(\"--range-step\"),\n      HANDLE_SIZE: this.getGlobalCssValue(\"--handle-size\"),\n      get RANGE() {\n        return this.MAX_VALUE - this.MIN_VALUE;\n      },\n    };\n\n    this.elements = {\n      progress: document.querySelector(\".progress\") as HTMLElement,\n      minRange: document.querySelector(\".min-range\") as HTMLInputElement,\n      maxRange: document.querySelector(\".max-range\") as HTMLInputElement,\n      handles: document.querySelectorAll(\".handle\") as NodeListOf<HTMLElement>,\n    };\n\n    this.elements.minRange.addEventListener(\"input\", (e) => {\n      this.setStartValue(+(e.target as HTMLInputElement).value);\n    });\n\n    this.elements.maxRange.addEventListener(\"input\", (e) => {\n      this.setEndValue(+(e.target as HTMLInputElement).value);\n    });\n  }\n\n  getGlobalCssValue(key: string): number {\n    const property = getComputedStyle(\n      document.documentElement\n    ).getPropertyValue(key);\n    return property ? parseFloat(property) : 0;\n  }\n\n  init({ min, max }: { min: number; max: number }) {\n    const { MIN_VALUE, MAX_VALUE, RANGE_STEP } = this.constants;\n    const { minRange, maxRange } = this.elements;\n\n    minRange.min = maxRange.min = MIN_VALUE.toString();\n    minRange.max = maxRange.max = MAX_VALUE.toString();\n    minRange.step = maxRange.step = RANGE_STEP.toString();\n\n    // Initialize values\n    minRange.value = min.toString();\n    maxRange.value = max.toString();\n\n    this.setStartValue(min);\n    this.setEndValue(max);\n  }\n\n  setHandlePos(range: HTMLInputElement, handle: HTMLElement) {\n    const { MIN_VALUE, RANGE, HANDLE_SIZE } = this.constants;\n    const percentage = (parseFloat(range.value) - MIN_VALUE) / RANGE;\n    const offset = HANDLE_SIZE / 2 - HANDLE_SIZE * percentage;\n    const left = `calc(${percentage * 100}% + ${offset}px)`;\n    handle.style.left = left;\n  }\n\n  setStartValue(v: number) {\n    const { minRange, maxRange, progress, handles } = this.elements;\n    if (v >= +maxRange.value) {\n      v = +maxRange.value - this.constants.RANGE_STEP;\n      minRange.value = v.toString();\n    }\n    const value = this.getCurrStep(v) * this.constants.RANGE_STEP;\n    progress.style.left = `${(value / this.constants.RANGE) * 100}%`;\n    this.setHandlePos(minRange, handles[0]);\n  }\n\n  setEndValue(v: number) {\n    const { minRange, maxRange, progress, handles } = this.elements;\n    if (v <= +minRange.value) {\n      v = +minRange.value + this.constants.RANGE_STEP;\n      maxRange.value = v.toString();\n    }\n    const value = this.getCurrStep(v) * this.constants.RANGE_STEP;\n    progress.style.right = `${100 - (value / this.constants.RANGE) * 100}%`;\n    this.setHandlePos(maxRange, handles[1]);\n  }\n\n  getCurrStep(v: number): number {\n    return (v - this.constants.MIN_VALUE) / this.constants.RANGE_STEP;\n  }\n}\n\nconst slider = new RangeSlider();\nslider.init({ min: 10, max: 150 });\n"]}